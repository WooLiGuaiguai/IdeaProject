package 数学;
//求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）
public class 整数中1出现的次数 {
 /*通过m求从1到n中，每个十进制位出现1的次数，m取值1,10,100...
为了求每个十进制位出现1的次数，把n分成两个部分，例如当用m=100来把n=3141592分成a=31415和b=92两个部分求百位出现1的次数。
此时把从1到3141592的数中，百位为1的数看做oooo1xx，其中oooo可以从0到3141，xx可以从0到99。
因此百位的1出现3142*100次，也就是(a/10+1)*m。

再把m取1000判断千位上1出现的次数，同样的把n分成a=3141和b=592两个部分。
把从1到3141592的数中，千位为1的数看做ooo1xxx，当ooo从0到313，xxx可以从0到999，当ooo是314的时候，xxx只可以从0到592了
因此千位的1出现313*1000+593次，也就是(a/10)*m+(b+1)。

因此当a的个位为2及以上时，次数是(a/10+1)*m。a的个位为1时，次数是(a/10)*m+(b+1)。a的个位为0时，次数是(a/10)*m。
综上三种情况可以得到(a + 8) / 10 * m + (a % 10 == 1) ？ (b + 1)：0;*/
    public static int NumberOf1Between1AndN_Solution(int n){
        int count=0;//统计1的个数
        for(int m=1;m<=n;m*=10){
            int a=n/m,b=n%m;
            if(a%10==0){//a的个位是0   例如314022 a=3140 b=22 m=100 (0-313)1(0-99)
                count=count+(a/10)*m;
            }else if(a%10==1){//a的个位是1   例如314122 a=3141 b=22 m=100 (0-313)1(0-99)+(314)1(0-22)
                count=count+(a/10)*m+(b+1);
            }else{//a的个位大于1   314522 a=3145 b=22 m=100  (0-314)1(0-99)
                count=count+(a/10+1)*m;
            }
        }
        return count;
    }

    public static void main(String[] args) {
        System.out.println(NumberOf1Between1AndN_Solution(13));
    }
}
